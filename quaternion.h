//
//
//
//
//
//
#if ! defined QUATERNION_H
#define QUATERNION_H

#include <stdbool.h>

#include "vector3.h"


typedef union quaternion {
    double q[4];

    struct
    {
        double w;
        double x;
        double y;
        double z;
    };
} Quaternion;


//==========================================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------------------
// Returns (1.0, 0.0, 0.0, 0.0) quaternion
Quaternion quat_from_identity(void);

//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_from_values(double w, double x, double y, double z);

//------------------------------------------------------------------------------------------------------------------------------------------
// @param [angle] is in radians
// @param [axis] is a Vector3 object. (Has a .v member which is an array of 3 doubles)
Quaternion quat_from_angle_axis(double angle, Vector3 axis);

//------------------------------------------------------------------------------------------------------------------------------------------
// @ret normalised quaternion describing a rotation from [a] to [b].
Quaternion quat_from_vec3(Vector3 a, Vector3 b);

//------------------------------------------------------------------------------------------------------------------------------------------
// @param all angles should be given in radians
Quaternion quat_from_euler_angles(double anglex, double angley, double anglez);



//==========================================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_copy(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
double quat_len_squared(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
double quat_len(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_norm(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_negate(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_conjugate(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_inverse(Quaternion q);

//------------------------------------------------------------------------------------------------------------------------------------------
void quat_print(Quaternion q);



//==========================================================================================================================================
//------------------------------------------------------------------------------------------------------------------------------------------
bool quat_equal(Quaternion a, Quaternion b);

//------------------------------------------------------------------------------------------------------------------------------------------
// Alternative quat comparison function. quat_equal should be faster in most cases.
bool quat_matching(Quaternion a, Quaternion b);

//------------------------------------------------------------------------------------------------------------------------------------------
double quat_dot(Quaternion a, Quaternion b);

//------------------------------------------------------------------------------------------------------------------------------------------
Quaternion quat_mul(Quaternion a, Quaternion b);

//------------------------------------------------------------------------------------------------------------------------------------------
Vector3 quat_rotate_vec3(Quaternion q, Vector3 v);

//------------------------------------------------------------------------------------------------------------------------------------------
// @param [buffer] pointer to array in which the matrix will be stored. Must hold at least 16 doubles.
void quat_to_matrix44(Quaternion q, double * buffer);


#endif      // QUATERNION_H
